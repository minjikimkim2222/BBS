/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.95
 * Generated at: 2024-01-02 13:26:27 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.example.bbs.Bbs;
import com.example.bbs.BbsDao;

public final class writeAction_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.example.bbs.Bbs");
    _jspx_imports_classes.add("com.example.bbs.BbsDao");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\n');
      out.write('\n');
      out.write('\n');
 request.setCharacterEncoding("utf-8"); 
      out.write("\n");
      out.write("<!-- 주로 POST 방식으로 전송된 데이터의 인코딩을 지정하는 용도로 사용됩니다.\n");
      out.write("     이 설정은 클라이언트가 서버로 전송한 데이터의 문자 인코딩을 UTF-8로 설정하겠다는 것을 의미합니다.\n");
      out.write("     이를 통해 한글 데이터가 깨지지 않도록 보장할 수 있습니다. -->\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("    <meta charset=\"UTF-8\">\n");
      out.write("    <title>writeAction.jsp</title>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("    ");

        // 현재 세션 상태를 체크한다.
        String userID = null;
        if (session.getAttribute("userID") != null){
            userID = (String) session.getAttribute("userID");
        }

        // 로그인을 한 사람만 글을 쓸 수 있도록 코드 수정
        if (userID == null){
    
      out.write("\n");
      out.write("            <script>\n");
      out.write("                alert('로그인을 하세요');\n");
      out.write("                location.href = 'login.jsp';\n");
      out.write("            </script>\n");
      out.write("    ");

        } else { 
			// 입력 안 된 부분이 있는지 체크한다.
			String bbsTitle = request.getParameter("bbsTitle");
        	String bbsContent = request.getParameter("bbsContent");
        	
        	if (bbsTitle == null || bbsContent == null){
     
      out.write("   \n");
      out.write("     			<script>\n");
      out.write("     				alert('입력이 안 된 사항이 있습니다.');\n");
      out.write("     				history.back();\n");
      out.write("     			</script>\n");
      out.write("     ");
 		
        	} else { // 로그인했고, 모든 내용이 정상적으로 입력이 되었을 때, '글쓰기 성공' 알림창과 게시판메인페이지(bbs.jsp)로 이동하게끔 한다.
                Bbs bbs = new Bbs();
        	
        		bbs.setBbsTitle(bbsTitle);
        		bbs.setUserID(userID);
        		bbs.setBbsContent(bbsContent); // 이 세개 세팅하고 write 메서드로 던지면, 나머지는 알아서 다른 메서드를 이용해 채워줌 
        		
				BbsDao bbsDao = new BbsDao();
        		
        		int result = bbsDao.write(bbsTitle, userID, bbsContent);
                
        		// 데이터베이스 오류인 경우 
               	if (result == -1){
     
      out.write("				<script>\n");
      out.write("     					alert('글쓰기에 실패했습니다.');\n");
      out.write("     					history.back();\n");
      out.write("     				</script>\n");
      out.write("     ");
           		
               	} else { // 글쓰기가 정상적으로 실행되면, 알림창을 띄우고 + 게시판 메인으로 이동한다. 
     
      out.write("\n");
      out.write("     				<script>\n");
      out.write("     					alert('글쓰기 성공');\n");
      out.write("     					location.href = 'bbs.jsp';\n");
      out.write("     				</script>\n");
      out.write("     ");
         		
               	}
        	}
       
        }
     
      out.write("\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
